const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://rscgytocxltrqtwspehs.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJzY2d5dG9jeGx0cnF0d3NwZWhzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU4NjUzNDEsImV4cCI6MjA3MTQ0MTM0MX0.MkaV0vkLX9jdCxZ_5fz6jjZBhChc1W9vtVicZSt1Pt0'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function checkAuthConfig() {
  console.log('üîç V√©rification de la configuration d\'authentification...')
  
  try {
    // Test de connexion basique
    const { data: testData, error: testError } = await supabase
      .from('categories')
      .select('count')
      .limit(1)
    
    if (testError) {
      console.error('‚ùå Erreur de connexion:', testError)
      return
    }
    
    console.log('‚úÖ Connexion Supabase √©tablie')
    
    // Test de r√©cup√©ration des informations de session
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    if (sessionError) {
      console.log('‚ö†Ô∏è  Erreur de session:', sessionError.message)
    } else {
      console.log('‚úÖ Gestion des sessions OK')
      console.log('   - Session actuelle:', session ? 'Oui' : 'Non')
    }
    
    // Test de r√©cup√©ration de l'utilisateur actuel
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    
    if (userError) {
      console.log('‚ö†Ô∏è  Erreur utilisateur:', userError.message)
    } else {
      console.log('‚úÖ Gestion des utilisateurs OK')
      console.log('   - Utilisateur actuel:', user ? 'Oui' : 'Non')
    }
    
    // Test de la configuration des e-mails
    console.log('\nüìß Test de la configuration des e-mails...')
    
    // V√©rifier si les templates d'e-mail existent
    try {
      const { data: emailTemplates, error: emailError } = await supabase
        .from('auth.email_templates')
        .select('*')
        .limit(5)
      
      if (emailError) {
        console.log('‚ö†Ô∏è  Templates d\'e-mail non accessibles:', emailError.message)
      } else {
        console.log('‚úÖ Templates d\'e-mail accessibles')
        console.log('   - Nombre de templates:', emailTemplates?.length || 0)
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Impossible d\'acc√©der aux templates d\'e-mail:', error.message)
    }
    
    // Test de la configuration g√©n√©rale
    try {
      const { data: config, error: configError } = await supabase
        .from('auth.config')
        .select('*')
        .limit(5)
      
      if (configError) {
        console.log('‚ö†Ô∏è  Configuration non accessible:', configError.message)
      } else {
        console.log('‚úÖ Configuration accessible')
        console.log('   - Nombre de configs:', config?.length || 0)
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Impossible d\'acc√©der √† la configuration:', error.message)
    }
    
    console.log('\nüéØ R√©sum√©:')
    console.log('- Connexion Supabase: ‚úÖ')
    console.log('- Gestion des sessions: ' + (sessionError ? '‚ùå' : '‚úÖ'))
    console.log('- Gestion des utilisateurs: ' + (userError ? '‚ùå' : '‚úÖ'))
    console.log('- Templates d\'e-mail: ' + (emailTemplates ? '‚úÖ' : '‚ö†Ô∏è'))
    console.log('- Configuration g√©n√©rale: ' + (config ? '‚úÖ' : '‚ö†Ô∏è'))
    
    if (sessionError || userError) {
      console.log('\n‚ö†Ô∏è  Probl√®mes d√©tect√©s dans l\'authentification.')
      console.log('   V√©rifiez que les scripts SQL ont √©t√© ex√©cut√©s.')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error)
  }
}

checkAuthConfig()

