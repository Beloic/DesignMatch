const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://rscgytocxltrqtwspehs.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJzY2d5dG9jeGx0cnF0d3NwZWhzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU4NjUzNDEsImV4cCI6MjA3MTQ0MTM0MX0.MkaV0vkLX9jdCxZ_5fz6jjZBhChc1W9vtVicZSt1Pt0'

// Note: Pour ex√©cuter du SQL directement, il faut utiliser la cl√© de service, pas la cl√© anon
// Mais on peut tester l'√©tat actuel avec la cl√© anon

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function setupDatabase() {
  console.log('üîß Configuration de la base de donn√©es DesignMatch...')
  
  try {
    // V√©rification de l'√©tat actuel
    console.log('\nüìä V√©rification de l\'√©tat actuel...')
    
    // Test des tables existantes
    const tables = ['profiles', 'categories', 'missions', 'applications', 'favorites', 'messages', 'notifications', 'reviews']
    const tableStatus = {}
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('count')
          .limit(1)
        
        if (error) {
          tableStatus[table] = '‚ùå Non accessible'
        } else {
          tableStatus[table] = '‚úÖ Accessible'
        }
      } catch (e) {
        tableStatus[table] = '‚ùå Erreur'
      }
    }
    
    console.log('\nüìã √âtat des tables:')
    Object.entries(tableStatus).forEach(([table, status]) => {
      console.log(`   - ${table}: ${status}`)
    })
    
    // Test d'inscription
    console.log('\nüß™ Test d\'inscription...')
    
    const testEmail = 'testuser@designmatch.fr'
    const testPassword = 'motdepasse123'
    
    const { data: signupData, error: signupError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          full_name: 'Utilisateur Test'
        }
      }
    })
    
    if (signupError) {
      console.log('‚ùå Erreur inscription:', signupError.message)
      console.log('   Code:', signupError.status)
      
      // Diagnostics suppl√©mentaires
      if (signupError.message.includes('invalid')) {
        console.log('\nüîç Diagnostic:')
        console.log('   - Le probl√®me semble √™tre la validation d\'email')
        console.log('   - V√©rifiez la configuration Auth dans Supabase')
        console.log('   - Allez dans Authentication > Settings')
        console.log('   - V√©rifiez que les inscriptions sont activ√©es')
      }
    } else {
      console.log('‚úÖ Inscription r√©ussie!')
      console.log('   - User ID:', signupData.user?.id)
      console.log('   - Email:', signupData.user?.email)
      console.log('   - Confirmation requise:', !signupData.session)
      
      // Test de cr√©ation de profil
      if (signupData.user && tableStatus.profiles === '‚úÖ Accessible') {
        console.log('\nüë§ Test de cr√©ation de profil...')
        
        const { data: profileData, error: profileError } = await supabase
          .from('profiles')
          .insert({
            id: signupData.user.id,
            email: testEmail,
            full_name: 'Utilisateur Test',
            job_title: 'Designer Test',
            skills: ['Design', 'Test'],
            experience_years: 0,
            availability: true
          })
          .select()
          .single()
        
        if (profileError) {
          console.log('‚ùå Erreur cr√©ation profil:', profileError.message)
        } else {
          console.log('‚úÖ Profil cr√©√© avec succ√®s!')
        }
      }
      
      // Nettoyage
      if (signupData.user) {
        console.log('üßπ Nettoyage du test...')
        // Note: La suppression via admin n'est pas possible avec la cl√© anon
        console.log('   (Nettoyage manuel requis)')
      }
    }
    
    // R√©sum√© et recommandations
    console.log('\nüìã R√âSUM√â:')
    const tablesOk = Object.values(tableStatus).filter(s => s.includes('‚úÖ')).length
    console.log(`   - Tables accessibles: ${tablesOk}/${tables.length}`)
    console.log(`   - Inscription: ${signupError ? '‚ùå' : '‚úÖ'}`)
    
    if (signupError || tablesOk < tables.length) {
      console.log('\nüîß ACTIONS REQUISES:')
      
      if (tablesOk < tables.length) {
        console.log('   1. Ex√©cuter les scripts SQL dans Supabase SQL Editor:')
        console.log('      - database/clean-tables-only.sql')
        console.log('      - database/install-step-by-step.sql')
      }
      
      if (signupError) {
        console.log('   2. Configurer l\'authentification dans Supabase:')
        console.log('      - Aller dans Authentication > Settings')
        console.log('      - Activer "Enable email signups"')
        console.log('      - V√©rifier les domaines autoris√©s')
        console.log('      - Configurer les URLs de redirection')
      }
    } else {
      console.log('\nüéâ TOUT FONCTIONNE!')
      console.log('   La base de donn√©es est pr√™te √† l\'utilisation.')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
  }
}

setupDatabase()
